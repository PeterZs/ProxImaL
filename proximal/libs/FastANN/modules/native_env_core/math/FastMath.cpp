/*
 * Copyright (c) 2012-2013, NVIDIA CORPORATION.  All rights reserved.
 *
 * NVIDIA Corporation and its licensors retain all intellectual property
 * and proprietary rights in and to this software, related documentation
 * and any modifications thereto.  Any use, reproduction, disclosure or
 * distribution of this software and related documentation without an express
 * license agreement from NVIDIA Corporation is strictly prohibited.
 */

#include "FastMath.h"

// reciprocal LUT contains 1/d, where d is a numbers between 1.0 and 2.0 (exclusive)
ushort const RecpLUT[1 << RECP_LUT_BITS] =
{ 0x8000, 0x7fc0, 0x7f80, 0x7f41, 0x7f01, 0x7ec3, 0x7e84, 0x7e46, 0x7e07, 0x7dc9, 0x7d8c, 0x7d4e, 0x7d11, 0x7cd4,
  0x7c97, 0x7c5b, 0x7c1f, 0x7be2, 0x7ba7, 0x7b6b, 0x7b30, 0x7af4, 0x7aba, 0x7a7f, 0x7a44, 0x7a0a, 0x79d0, 0x7996,
  0x795c, 0x7923, 0x78ea, 0x78b1, 0x7878, 0x783f, 0x7807, 0x77cf, 0x7797, 0x775f, 0x7728, 0x76f0, 0x76b9, 0x7682,
  0x764b, 0x7615, 0x75de, 0x75a8, 0x7572, 0x753c, 0x7507, 0x74d1, 0x749c, 0x7467, 0x7432, 0x73fe, 0x73c9, 0x7395,
  0x7361, 0x732d, 0x72f9, 0x72c6, 0x7292, 0x725f, 0x722c, 0x71f9, 0x71c7, 0x7194, 0x7162, 0x7130, 0x70fe, 0x70cc,
  0x709a, 0x7069, 0x7038, 0x7007, 0x6fd6, 0x6fa5, 0x6f74, 0x6f44, 0x6f13, 0x6ee3, 0x6eb3, 0x6e84, 0x6e54, 0x6e25,
  0x6df5, 0x6dc6, 0x6d97, 0x6d68, 0x6d3a, 0x6d0b, 0x6cdd, 0x6cae, 0x6c80, 0x6c52, 0x6c25, 0x6bf7, 0x6bca, 0x6b9c,
  0x6b6f, 0x6b42, 0x6b15, 0x6ae9, 0x6abc, 0x6a90, 0x6a63, 0x6a37, 0x6a0b, 0x69df, 0x69b4, 0x6988, 0x695d, 0x6931,
  0x6906, 0x68db, 0x68b0, 0x6885, 0x685b, 0x6830, 0x6806, 0x67dc, 0x67b2, 0x6788, 0x675e, 0x6734, 0x670b, 0x66e1,
  0x66b8, 0x668f, 0x6666, 0x663d, 0x6614, 0x65ec, 0x65c3, 0x659b, 0x6572, 0x654a, 0x6522, 0x64fa, 0x64d3, 0x64ab,
  0x6483, 0x645c, 0x6435, 0x640e, 0x63e7, 0x63c0, 0x6399, 0x6372, 0x634c, 0x6325, 0x62ff, 0x62d9, 0x62b2, 0x628c,
  0x6267, 0x6241, 0x621b, 0x61f6, 0x61d0, 0x61ab, 0x6186, 0x6160, 0x613c, 0x6117, 0x60f2, 0x60cd, 0x60a9, 0x6084,
  0x6060, 0x603c, 0x6018, 0x5ff4, 0x5fd0, 0x5fac, 0x5f88, 0x5f64, 0x5f41, 0x5f1e, 0x5efa, 0x5ed7, 0x5eb4, 0x5e91,
  0x5e6e, 0x5e4b, 0x5e29, 0x5e06, 0x5de4, 0x5dc1, 0x5d9f, 0x5d7d, 0x5d5b, 0x5d39, 0x5d17, 0x5cf5, 0x5cd3, 0x5cb2,
  0x5c90, 0x5c6f, 0x5c4d, 0x5c2c, 0x5c0b, 0x5bea, 0x5bc9, 0x5ba8, 0x5b87, 0x5b67, 0x5b46, 0x5b26, 0x5b05, 0x5ae5,
  0x5ac5, 0x5aa5, 0x5a84, 0x5a64, 0x5a45, 0x5a25, 0x5a05, 0x59e6, 0x59c6, 0x59a7, 0x5987, 0x5968, 0x5949, 0x592a,
  0x590b, 0x58ec, 0x58cd, 0x58ae, 0x588f, 0x5871, 0x5852, 0x5834, 0x5816, 0x57f7, 0x57d9, 0x57bb, 0x579d, 0x577f,
  0x5761, 0x5743, 0x5726, 0x5708, 0x56ea, 0x56cd, 0x56b0, 0x5692, 0x5675, 0x5658, 0x563b, 0x561e, 0x5601, 0x55e4,
  0x55c7, 0x55ab, 0x558e, 0x5571, 0x5555, 0x5538, 0x551c, 0x5500, 0x54e4, 0x54c8, 0x54ab, 0x5490, 0x5474, 0x5458,
  0x543c, 0x5420, 0x5405, 0x53e9, 0x53ce, 0x53b2, 0x5397, 0x537c, 0x5361, 0x5345, 0x532a, 0x530f, 0x52f4, 0x52da,
  0x52bf, 0x52a4, 0x5289, 0x526f, 0x5254, 0x523a, 0x5220, 0x5205, 0x51eb, 0x51d1, 0x51b7, 0x519d, 0x5183, 0x5169,
  0x514f, 0x5135, 0x511b, 0x5102, 0x50e8, 0x50cf, 0x50b5, 0x509c, 0x5082, 0x5069, 0x5050, 0x5037, 0x501e, 0x5005,
  0x4fec, 0x4fd3, 0x4fba, 0x4fa1, 0x4f88, 0x4f70, 0x4f57, 0x4f3e, 0x4f26, 0x4f0d, 0x4ef5, 0x4edd, 0x4ec4, 0x4eac,
  0x4e94, 0x4e7c, 0x4e64, 0x4e4c, 0x4e34, 0x4e1c, 0x4e04, 0x4ded, 0x4dd5, 0x4dbd, 0x4da6, 0x4d8e, 0x4d77, 0x4d5f,
  0x4d48, 0x4d31, 0x4d19, 0x4d02, 0x4ceb, 0x4cd4, 0x4cbd, 0x4ca6, 0x4c8f, 0x4c78, 0x4c61, 0x4c4b, 0x4c34, 0x4c1d,
  0x4c07, 0x4bf0, 0x4bda, 0x4bc3, 0x4bad, 0x4b96, 0x4b80, 0x4b6a, 0x4b54, 0x4b3e, 0x4b27, 0x4b11, 0x4afb, 0x4ae5,
  0x4ad0, 0x4aba, 0x4aa4, 0x4a8e, 0x4a79, 0x4a63, 0x4a4d, 0x4a38, 0x4a22, 0x4a0d, 0x49f7, 0x49e2, 0x49cd, 0x49b8,
  0x49a2, 0x498d, 0x4978, 0x4963, 0x494e, 0x4939, 0x4924, 0x490f, 0x48fa, 0x48e6, 0x48d1, 0x48bc, 0x48a8, 0x4893,
  0x487e, 0x486a, 0x4855, 0x4841, 0x482d, 0x4818, 0x4804, 0x47f0, 0x47dc, 0x47c7, 0x47b3, 0x479f, 0x478b, 0x4777,
  0x4763, 0x474f, 0x473c, 0x4728, 0x4714, 0x4700, 0x46ed, 0x46d9, 0x46c5, 0x46b2, 0x469e, 0x468b, 0x4678, 0x4664,
  0x4651, 0x463e, 0x462a, 0x4617, 0x4604, 0x45f1, 0x45de, 0x45cb, 0x45b8, 0x45a5, 0x4592, 0x457f, 0x456c, 0x4559,
  0x4546, 0x4534, 0x4521, 0x450e, 0x44fc, 0x44e9, 0x44d7, 0x44c4, 0x44b2, 0x449f, 0x448d, 0x447b, 0x4468, 0x4456,
  0x4444, 0x4432, 0x441f, 0x440d, 0x43fb, 0x43e9, 0x43d7, 0x43c5, 0x43b3, 0x43a1, 0x4390, 0x437e, 0x436c, 0x435a,
  0x4349, 0x4337, 0x4325, 0x4314, 0x4302, 0x42f1, 0x42df, 0x42ce, 0x42bc, 0x42ab, 0x429a, 0x4288, 0x4277, 0x4266,
  0x4254, 0x4243, 0x4232, 0x4221, 0x4210, 0x41ff, 0x41ee, 0x41dd, 0x41cc, 0x41bb, 0x41aa, 0x419a, 0x4189, 0x4178,
  0x4167, 0x4157, 0x4146, 0x4135, 0x4125, 0x4114, 0x4104, 0x40f3, 0x40e3, 0x40d2, 0x40c2, 0x40b1, 0x40a1, 0x4091,
  0x4081, 0x4070, 0x4060, 0x4050, 0x4040, 0x4030, 0x4020, 0x4010 };

// in case we need to precompute reciprocal LUT for different params (precision/size)
void init_recp_lut(ushort *recpLut)
{
    for (int i = 0; i < (1 << RECP_LUT_BITS); i++)
    {
        recpLut[i] = ((uint)1 << (RECP_MANTISSA_BITS - 1 + RECP_LUT_BITS)) / ((1 << RECP_LUT_BITS) | i);
    }
}
